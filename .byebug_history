c
track
n
!Shortener.ignore_robots  || VoightKampff.human?(request.user_agent)
Shortener.ignore_robots  || VoightKampff.human?(request.user_agent)
VoightKampff.human?(request.user_agent)
Shortener.ignore_robots
exit
track
n
c
s
n
exit
VoightKampff.human?(request.user_agent)
Shortener.ignore_robots.blank?
Shortener.ignore_robots
exit
c
 VoightKampff.human?(request.user_agent)
exit
VoightKampff::Test.new(request.user_agent).human?
VoightKampff::Test.new(user_agent).human?
request.human?
request.bot?
request
c
request.human?
request
request.bot?
exit
request.human?
request
exit
params.to_unsafe_hash
params.with_indifferent_access
params
params[:id]
params
n
exit
c
exception
n
exit
get :show, params: {id: key}
exit
get :show, params: {id: key}
get :show, params: {id: key}.permit
get :show, params: {id: key}
get :show, {id: key}
get :show, id: key
exit
c
get :show, params: {id: key}
key
other_params
c
s
o
s
response
c
n
exit
shortened_url
n
token
n
token
s
c
exit
find_by(unique_key: token)
exit
exi
exit
unexpired.where(unique_key: token).first
exit
c
unexpired.where(unique_key: token).to_sql
unexpired
where(unique_key: token)
exit
 shortened_url = Shortener::ShortenedUrl.unexpired.where(unique_key: token).first
shortened_url
exit
c
shortened_url
c
Shortener.default_redirect
n
shortened_url
n
Shortener::ShortenedUrl.unexpired.where(unique_key: token)
shortened_url
exit
shortened_url
self
token
exit
c
Shortener::ShortenedUrl.unexpired.where(unique_key: token).first
shortened_url
c
token
shortened_url
c
Shortener::ShortenedUrl.unexpired.where(unique_key: token).first
shortened_url
exit
c
exit
Shortener::ShortenedUrl.generate!(existing_shortened_url)
existing_shortened_url
c
exit
existing_shortened_url
Shortener::ShortenedUrl.where(url: url)
Shortener::ShortenedUrl.where(url: clean_url(url)
Shortener::ShortenedUrl.clean_url(url)
Shortener::ShortenedUrl.clean(url)
url
Shortener::ShortenedUrl.generate!(url)
exit
c
generate_unique_key
exit
c
(0...::Shortener.unique_key_length)
Shortener::ShortenedUrl.find_by(unique_key: custom_key)
custom_key = ''
Shortener::ShortenedUrl.find_by(unique_key: custom_key)
::Shortener.key_chars
self.key_chars
self.generate_unique_key
exit
self.generate_unique_key
exit
c
self.generate_unique_key
self.name
generate_unique_key
exit
(0...::Shortener.unique_key_length).map{ charset[rand(charset.size)] }.join
self.generate_unique_key
self
this
generate_unique_key
c
Shortener::ShortenedUrl.generate!('http://example.com')
Shortener::ShortenedUrl.where(url: 'http://example.com')
c
destination_url
c
result
c
result
c
result
c
result
c
Shortener::ShortenedUrl.where(url: 'http://example.com')
Shortener::ShortenedUrl.where(url: 
Shortener::ShortenedUrl.all
Shortener::ShortenedUrl.generate!('http://example.com')
c
Shortener::ShortenedUrl.generate!('http://example.com')
c
Shortener::ShortenedUrl.generate!('http://example.com')
c
Shortener::ShortenedUrl.generate!('http://example.com')
Shortener::ShortenedUrl.generate!(long_url, owner: owner)
owner
long_url
